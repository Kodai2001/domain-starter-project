{"ast":null,"code":"var _jsxFileName = \"/Users/hayashikdi/Development/UNCHAIN-project/cool-domains/domain-starter-project/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport { ethers } from \"ethers\";\nimport contractAbi from \"./utils/contractABI.json\";\nimport polygonLogo from './assets/polygonlogo.png';\nimport ethLogo from './assets/ethlogo.png';\nimport { networks } from './utils/networks';\n\n// コントラクト\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = \"_UNCHAIN\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n// 登録したいドメインです。好みで変えてみましょう。\nconst tld = \".ninja\";\nconst CONTRACT_ADDRESS = \"0x74b03650d0dCA49E4Ec34e55Be906CdfB5B7F3b5\";\nconst App = () => {\n  _s();\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  // state管理するプロパティを追加しています。\n  const [domain, setDomain] = useState(\"\");\n  const [record, setRecord] = useState(\"\");\n  const [network, setNetwork] = useState(\"\");\n  const [editing, setEditing] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [mints, setMints] = useState([]);\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask -> https://metamask.io/\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const switchNetwork = async () => {\n    if (window.ethereum) {\n      try {\n        // Mumbai testnet に切り替えます。\n        await window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: '0x13881'\n          }] // utilsフォルダ内のnetworks.js を確認しましょう。0xは16進数です。\n        });\n      } catch (error) {\n        // このエラーコードは当該チェーンがメタマスクに追加されていない場合です。\n        // その場合、ユーザーに追加するよう促します。\n        if (error.code === 4902) {\n          try {\n            await window.ethereum.request({\n              method: 'wallet_addEthereumChain',\n              params: [{\n                chainId: '0x13881',\n                chainName: 'Polygon Mumbai Testnet',\n                rpcUrls: ['https://rpc-mumbai.maticvigil.com/'],\n                nativeCurrency: {\n                  name: \"Mumbai Matic\",\n                  symbol: \"MATIC\",\n                  decimals: 18\n                },\n                blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"]\n              }]\n            });\n          } catch (error) {\n            console.log(error);\n          }\n        }\n        console.log(error);\n      }\n    } else {\n      // window.ethereum が見つからない場合メタマスクのインストールを促します。\n      alert('MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html');\n    }\n  };\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n\n    // ユーザーのネットワークのチェーンIDをチェックします。\n    const chainId = await ethereum.request({\n      method: 'eth_chainId'\n    });\n    setNetwork(networks[chainId]);\n    ethereum.on('chainChanged', handleChainChanged);\n\n    // ネットワークが変わったらリロードします。\n    function handleChainChanged(_chainId) {\n      window.location.reload();\n    }\n  };\n  const mintDomain = async () => {\n    // domain の存在確認です。\n    if (!domain) {\n      return;\n    }\n    // ドメインが短すぎる場合アラートを出します。\n    if (domain.length < 3) {\n      alert('Domain must be at least 3 characters long');\n      return;\n    }\n\n    // ドメインの文字数で価格を計算します。\n    // 3文字 = 0.005 MATIC, 4文字 = 0.003 MATIC, 5文字以上 = 0.001 MATIC\n    // ご自分で設定を変えても構いませんが、現在ウォレットには少量しかないはずです。。。\n    const price = domain.length === 3 ? '0.005' : domain.length === 4 ? '0.003' : '0.001';\n    console.log(\"Minting domain\", domain, \"with price\", price);\n    try {\n      const {\n        ethereum\n      } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let tx = await contract.register(domain, {\n          value: ethers.utils.parseEther(price)\n        });\n        // トランザクションを待ちます\n        const receipt = await tx.wait();\n\n        // トランザクションの成功の確認です。\n        if (receipt.status === 1) {\n          console.log(\"Domain minted! https://mumbai.polygonscan.com/tx/\" + tx.hash);\n\n          // domain の record をセットします。\n          tx = await contract.setRecord(domain, record);\n          await tx.wait();\n          console.log(\"Record set! https://mumbai.polygonscan.com/tx/\" + tx.hash);\n\n          // fetchMints関数実行後2秒待ちます。\n          setTimeout(() => {\n            fetchMints();\n          }, 2000);\n          setRecord('');\n          setDomain('');\n        } else {\n          alert(\"Transaction failed! Please try again\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const fetchMints = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      if (ethereum) {\n        // もう理解できていますね。\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n\n        // すべてのドメインを取得します。\n        const names = await contract.getAllNames();\n\n        // ネームごとにレコードを取得します。マッピングの対応を理解しましょう。\n        const mintRecords = await Promise.all(names.map(async name => {\n          const mintRecord = await contract.records(name);\n          const owner = await contract.domains(name);\n          return {\n            id: names.indexOf(name),\n            name: name,\n            record: mintRecord,\n            owner: owner\n          };\n        }));\n        console.log(\"MINTS FETCHED \", mintRecords);\n        setMints(mintRecords);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // App.js\n  const updateDomain = async () => {\n    if (!record || !domain) {\n      return;\n    }\n    setLoading(true);\n    console.log(\"Updating domain\", domain, \"with record\", record);\n    try {\n      const {\n        ethereum\n      } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n        let tx = await contract.setRecord(domain, record);\n        await tx.wait();\n        console.log(\"Record set https://mumbai.polygonscan.com/tx/\" + tx.hash);\n        fetchMints();\n        setRecord('');\n        setDomain('');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  // レンダリング関数です。\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connect-wallet-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"https://media.giphy.com/media/3ohhwytHcusSCXXOUg/giphy.gif\",\n      alt: \"Ninja donut gif\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n\n  // ドメインネームとデータの入力フォームです。\n  const renderInputForm = () => {\n    if (network !== 'Polygon Mumbai Testnet') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please connect to Polygon Mumbai Testnet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          onClick: switchNetwork,\n          children: \"Click here to switch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"first-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: domain,\n          placeholder: \"domain\",\n          onChange: e => setDomain(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"tld\",\n          children: [\" \", tld, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: record,\n        placeholder: \"whats ur ninja power?\",\n        onChange: e => setRecord(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), editing ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          disabled: loading,\n          onClick: updateDomain,\n          children: \"Set record\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          onClick: () => {\n            setEditing(false);\n          },\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }, this) :\n      /*#__PURE__*/\n      // editing 変数が true でない場合、Mint ボタンが代わりに表示されます。\n      _jsxDEV(\"button\", {\n        className: \"cta-button mint-button\",\n        disabled: loading,\n        onClick: mintDomain,\n        children: \"Mint\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this);\n  };\n  const renderMints = () => {\n    if (currentAccount && mints.length > 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mint-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"subtitle\",\n          children: \" Recently minted domains!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mint-list\",\n          children: mints.map((mint, index) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mint-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mint-row\",\n                children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                  className: \"link\",\n                  href: `https://testnets.opensea.io/assets/mumbai/${CONTRACT_ADDRESS}/${mint.id}`,\n                  target: \"_blank\",\n                  rel: \"noopener noreferrer\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"underlined\",\n                    children: [' ', mint.name, tld, ' ']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 8\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 6\n                }, this), mint.owner.toLowerCase() === currentAccount.toLowerCase() ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit-button\",\n                  onClick: () => editRecord(mint.name),\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"edit-icon\",\n                    src: \"https://img.icons8.com/metro/26/000000/pencil.png\",\n                    alt: \"Edit button\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 316,\n                    columnNumber: 7\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 315,\n                  columnNumber: 8\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\" \", mint.record, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 4\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 5\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 3\n      }, this);\n    }\n  };\n  const editRecord = name => {\n    console.log(\"Editing record for\", name);\n    setEditing(true);\n    setDomain(name);\n  };\n  useEffect(() => {\n    if (network === 'Polygon Mumbai Testnet') {\n      fetchMints();\n    }\n  }, [currentAccount, network]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"left\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: \"\\uD83D\\uDC31\\u200D\\uD83D\\uDC64 Ninja Name Service\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"subtitle\",\n              children: \"Your immortal API on the blockchain!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"right\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"Network logo\",\n              className: \"logo\",\n              src: network.includes(\"Polygon\") ? polygonLogo : ethLogo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 5\n            }, this), currentAccount ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\" Wallet: \", currentAccount.slice(0, 6), \"...\", currentAccount.slice(-4), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 24\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \" Not connected \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 101\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"TWiSwiQIqTj0yehKyBT3hxKEh+k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","twitterLogo","ethers","contractAbi","polygonLogo","ethLogo","networks","TWITTER_HANDLE","TWITTER_LINK","tld","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","domain","setDomain","record","setRecord","network","setNetwork","editing","setEditing","loading","setLoading","mints","setMints","connectWallet","ethereum","window","alert","accounts","request","method","console","log","error","switchNetwork","params","chainId","code","chainName","rpcUrls","nativeCurrency","name","symbol","decimals","blockExplorerUrls","checkIfWalletIsConnected","length","account","on","handleChainChanged","_chainId","location","reload","mintDomain","price","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","tx","register","value","utils","parseEther","receipt","wait","status","hash","setTimeout","fetchMints","names","getAllNames","mintRecords","Promise","all","map","mintRecord","records","owner","domains","id","indexOf","updateDomain","renderNotConnectedContainer","renderInputForm","e","target","renderMints","mint","index","toLowerCase","editRecord","includes","slice"],"sources":["/Users/hayashikdi/Development/UNCHAIN-project/cool-domains/domain-starter-project/src/App.js"],"sourcesContent":["// App.js\nimport React, { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport { ethers } from \"ethers\";\nimport contractAbi from \"./utils/contractABI.json\";\nimport polygonLogo from './assets/polygonlogo.png';\nimport ethLogo from './assets/ethlogo.png';\nimport { networks } from './utils/networks';\n\n// コントラクト\nconst TWITTER_HANDLE = \"_UNCHAIN\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n// 登録したいドメインです。好みで変えてみましょう。\nconst tld = \".ninja\";\nconst CONTRACT_ADDRESS = \"0x74b03650d0dCA49E4Ec34e55Be906CdfB5B7F3b5\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  // state管理するプロパティを追加しています。\n  const [domain, setDomain] = useState(\"\");\n  const [record, setRecord] = useState(\"\");\n  const [network, setNetwork] = useState(\"\");\n  const [editing, setEditing] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [mints, setMints] = useState([]);\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask -> https://metamask.io/\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const switchNetwork = async () => {\n\tif (window.ethereum) {\n\t  try {\n\t\t// Mumbai testnet に切り替えます。\n\t\tawait window.ethereum.request({\n\t\t  method: 'wallet_switchEthereumChain',\n\t\t  params: [{ chainId: '0x13881' }], // utilsフォルダ内のnetworks.js を確認しましょう。0xは16進数です。\n\t\t});\n\t  } catch (error) {\n\t\t// このエラーコードは当該チェーンがメタマスクに追加されていない場合です。\n\t\t// その場合、ユーザーに追加するよう促します。\n\t\tif (error.code === 4902) {\n\t\t  try {\n\t\t\tawait window.ethereum.request({\n\t\t\t  method: 'wallet_addEthereumChain',\n\t\t\t  params: [\n\t\t\t\t{\n\t\t\t\t  chainId: '0x13881',\n\t\t\t\t  chainName: 'Polygon Mumbai Testnet',\n\t\t\t\t  rpcUrls: ['https://rpc-mumbai.maticvigil.com/'],\n\t\t\t\t  nativeCurrency: {\n\t\t\t\t\t  name: \"Mumbai Matic\",\n\t\t\t\t\t  symbol: \"MATIC\",\n\t\t\t\t\t  decimals: 18\n\t\t\t\t  },\n\t\t\t\t  blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"]\n\t\t\t\t},\n\t\t\t  ],\n\t\t\t});\n\t\t  } catch (error) {\n\t\t\tconsole.log(error);\n\t\t  }\n\t\t}\n\t\tconsole.log(error);\n\t  }\n\t} else {\n\t  // window.ethereum が見つからない場合メタマスクのインストールを促します。\n\t  alert('MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html');\n\t}\n  }\n\n  const checkIfWalletIsConnected = async () => {\n\tconst { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n\n    // ユーザーのネットワークのチェーンIDをチェックします。\n    const chainId = await ethereum.request({ method: 'eth_chainId' });\n    setNetwork(networks[chainId]);\n\n    ethereum.on('chainChanged', handleChainChanged);\n\n    // ネットワークが変わったらリロードします。\n    function handleChainChanged(_chainId) {\n      window.location.reload();\n    }\n\t\n  };\n\n  const mintDomain = async () => {\n\t// domain の存在確認です。\n\tif (!domain) { return }\n\t// ドメインが短すぎる場合アラートを出します。\n\tif (domain.length < 3) {\n\t  alert('Domain must be at least 3 characters long');\n\t  return;\n\t}\n  \n\t// ドメインの文字数で価格を計算します。\n\t// 3文字 = 0.005 MATIC, 4文字 = 0.003 MATIC, 5文字以上 = 0.001 MATIC\n\t// ご自分で設定を変えても構いませんが、現在ウォレットには少量しかないはずです。。。\n\tconst price = domain.length === 3 ? '0.005' : domain.length === 4 ? '0.003' : '0.001';\n\tconsole.log(\"Minting domain\", domain, \"with price\", price);\n\ttry {\n\t\tconst { ethereum } = window;\n\t\tif (ethereum) {\n\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\tconst signer = provider.getSigner();\n\t\tconst contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n  \n\t\tconsole.log(\"Going to pop wallet now to pay gas...\")\n\t\t\tlet tx = await contract.register(domain, {value: ethers.utils.parseEther(price)});\n\t\t// トランザクションを待ちます\n\t\tconst receipt = await tx.wait();\n  \n\t\t// トランザクションの成功の確認です。\n\t\tif (receipt.status === 1) {\n\t\t  console.log(\"Domain minted! https://mumbai.polygonscan.com/tx/\"+tx.hash);\n  \n\t\t  // domain の record をセットします。\n\t\t  tx = await contract.setRecord(domain, record);\n\t\t  await tx.wait();\n  \n\t\t  console.log(\"Record set! https://mumbai.polygonscan.com/tx/\"+tx.hash);\n  \n\t\t  // fetchMints関数実行後2秒待ちます。\n\t\t  setTimeout(() => {\n\t\t\tfetchMints();\n\t\t  }, 2000);\n  \n\t\t  setRecord('');\n\t\t  setDomain('');\n\t\t} else {\n\t\t  alert(\"Transaction failed! Please try again\");\n\t\t}\n\t\t}\n\t  } catch(error) {\n\t\tconsole.log(error);\n\t  }\n  }\n\n  const fetchMints = async () => {\n\ttry {\n\t  const { ethereum } = window;\n\t  if (ethereum) {\n\t\t// もう理解できていますね。\n\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\tconst signer = provider.getSigner();\n\t\tconst contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n  \n\t\t// すべてのドメインを取得します。\n\t\tconst names = await contract.getAllNames();\n  \n\t\t// ネームごとにレコードを取得します。マッピングの対応を理解しましょう。\n\t\tconst mintRecords = await Promise.all(names.map(async (name) => {\n\t\tconst mintRecord = await contract.records(name);\n\t\tconst owner = await contract.domains(name);\n\t\treturn {\n\t\t  id: names.indexOf(name),\n\t\t  name: name,\n\t\t  record: mintRecord,\n\t\t  owner: owner,\n\t\t};\n\t  }));\n  \n\t  console.log(\"MINTS FETCHED \", mintRecords);\n\t  setMints(mintRecords);\n\t  }\n\t} catch(error){\n\t  console.log(error);\n\t}\n  }\n\n// App.js\n  const updateDomain = async () => {\n\tif (!record || !domain) { return }\n\tsetLoading(true);\n\tconsole.log(\"Updating domain\", domain, \"with record\", record);\n\t  try {\n\t\tconst { ethereum } = window;\n\t\tif (ethereum) {\n\t\t  const provider = new ethers.providers.Web3Provider(ethereum);\n\t\t  const signer = provider.getSigner();\n\t\t  const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n  \n\t\t  let tx = await contract.setRecord(domain, record);\n\t\t  await tx.wait();\n\t\t  console.log(\"Record set https://mumbai.polygonscan.com/tx/\"+tx.hash);\n  \n\t\t  fetchMints();\n\t\t  setRecord('');\n\t\t  setDomain('');\n\t\t}\n\t  } catch(error) {\n\t\tconsole.log(error);\n\t  }\n\tsetLoading(false);\n  }\n  \n  // レンダリング関数です。\n  const renderNotConnectedContainer = () => (\n    <div className=\"connect-wallet-container\">\n      <img\n        src=\"https://media.giphy.com/media/3ohhwytHcusSCXXOUg/giphy.gif\"\n        alt=\"Ninja donut gif\"\n      />\n      {/* ボタンクリックでconnectWallet関数を呼び出します。 */}\n      <button\n        onClick={connectWallet}\n        className=\"cta-button connect-wallet-button\"\n      >\n        Connect Wallet\n      </button>\n    </div>\n  );\n\n  // ドメインネームとデータの入力フォームです。\n  const renderInputForm = () =>{\n    if (network !== 'Polygon Mumbai Testnet') {\n      return (\n        <div className=\"connect-wallet-container\">\n          <p>Please connect to Polygon Mumbai Testnet</p>\n          <button className='cta-button mint-button' onClick={switchNetwork}>Click here to switch</button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"form-container\">\n        <div className=\"first-row\">\n          <input\n            type=\"text\"\n            value={domain}\n            placeholder='domain'\n            onChange={e => setDomain(e.target.value)}\n          />\n          <p className='tld'> {tld} </p>\n        </div>\n\n        <input\n          type=\"text\"\n          value={record}\n          placeholder='whats ur ninja power?'\n          onChange={e => setRecord(e.target.value)}\n        />\n          {/* editing 変数が true の場合、\"Set record\" と \"Cancel\" ボタンを表示します。 */}\n          {editing ? (\n            <div className=\"button-container\">\n              {/* updateDomain関数を呼び出します。 */}\n              <button className='cta-button mint-button' disabled={loading} onClick={updateDomain}>\n                Set record\n              </button>\n              {/* editing を false にしてEditモードから抜けます。*/}\n              <button className='cta-button mint-button' onClick={() => {setEditing(false)}}>\n                Cancel\n              </button>\n            </div>\n          ) : (\n            // editing 変数が true でない場合、Mint ボタンが代わりに表示されます。\n            <button className='cta-button mint-button' disabled={loading} onClick={mintDomain}>\n              Mint\n            </button>\n          )}\n      </div>\n    );\n  }\n\n  const renderMints = () => {\n\tif (currentAccount && mints.length > 0) {\n\t  return (\n\t\t<div className=\"mint-container\">\n\t\t  <p className=\"subtitle\"> Recently minted domains!</p>\n\t\t  <div className=\"mint-list\">\n\t\t\t{ mints.map((mint, index) => {\n\t\t\t  return (\n\t\t\t\t<div className=\"mint-item\" key={index}>\n\t\t\t\t  <div className='mint-row'>\n\t\t\t\t\t<a className=\"link\" href={`https://testnets.opensea.io/assets/mumbai/${CONTRACT_ADDRESS}/${mint.id}`} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t  <p className=\"underlined\">{' '}{mint.name}{tld}{' '}</p>\n\t\t\t\t\t</a>\n\t\t\t\t\t{/* mint.owner が currentAccount なら edit ボタンを追加します。 */}\n\t\t\t\t\t{ mint.owner.toLowerCase() === currentAccount.toLowerCase() ?\n\t\t\t\t\t  <button className=\"edit-button\" onClick={() => editRecord(mint.name)}>\n\t\t\t\t\t\t<img className=\"edit-icon\" src=\"https://img.icons8.com/metro/26/000000/pencil.png\" alt=\"Edit button\" />\n\t\t\t\t\t  </button>\n\t\t\t\t\t  :\n\t\t\t\t\t  null\n\t\t\t\t\t}\n\t\t\t\t  </div>\n\t\t\t<p> {mint.record} </p>\n\t\t  </div>)\n\t\t  })}\n\t\t</div>\n\t  </div>);\n\t}\n  };\n\n  const editRecord = (name) => {\n\tconsole.log(\"Editing record for\", name);\n\tsetEditing(true);\n\tsetDomain(name);\n  }\n  \n\n  useEffect(() => {\n\tif (network === 'Polygon Mumbai Testnet') {\n\t  fetchMints();\n\t}\n  }, [currentAccount, network]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n\t\t<div className=\"header-container\">\n\t\t\t<header>\n\t\t\t\t<div className=\"left\">\n\t\t\t\t<p className=\"title\">🐱‍👤 Ninja Name Service</p>\n\t\t\t\t<p className=\"subtitle\">Your immortal API on the blockchain!</p>\n\t\t\t\t</div>\n\t\t\t\t{/* Display a logo and wallet connection status*/}\n\t\t\t\t<div className=\"right\">\n\t\t\t\t<img alt=\"Network logo\" className=\"logo\" src={ network.includes(\"Polygon\") ? polygonLogo : ethLogo} />\n\t\t\t\t{ currentAccount ? <p> Wallet: {currentAccount.slice(0, 6)}...{currentAccount.slice(-4)} </p> : <p> Not connected </p> }\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t</div>\n\n        \n        {/* アカウントが接続されるとインプットフォームをレンダリングします。 */}\n\t\t\n\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}